{"version":3,"sources":["assets/scripts/utils/CSVLoader.ts"],"names":[],"mappings":";;;;;AAAA,oBAAoB;AACpB,4EAA4E;AAC5E,mBAAmB;AACnB,sFAAsF;AACtF,8BAA8B;AAC9B,sFAAsF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEhF,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAM5C;IAAA;IA2CA,CAAC;IA1CC;;OAEG;IACI,eAAK,GAAZ,UAAa,OAAe;QAC1B,IAAM,KAAK,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACzC,IAAM,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEpC,IAAM,OAAO,GAAgB,EAAE,CAAC;gCAEvB,CAAC;YACR,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACjC,IAAM,MAAM,GAAc,EAAE,CAAC;YAE7B,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM,EAAE,GAAG;gBAC1B,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;YAC3C,CAAC,CAAC,CAAC;YAEH,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;;QARvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;oBAA5B,CAAC;SAST;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACU,cAAI,GAAjB,UAAkB,QAAgB;uCAAG,OAAO;;;gBAC1C,sBAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;wBACjC,EAAE,CAAC,SAAS,CAAC,IAAI,CACf,aAAW,QAAU,EACrB,UAAC,GAAiB,EAAE,KAAmB;4BACrC,IAAI,GAAG,EAAE;gCACP,OAAO,CAAC,KAAK,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC;gCACvC,MAAM,CAAC,GAAG,CAAC,CAAC;gCACZ,OAAO;6BACR;4BACD,IAAM,IAAI,GAAG,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;4BACpC,OAAO,CAAC,IAAI,CAAC,CAAC;wBAChB,CAAC,CACF,CAAC;oBACJ,CAAC,CAAC,EAAC;;;KACJ;IACH,gBAAC;AAAD,CA3CA,AA2CC,IAAA;AA3CY,8BAAS","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/2.4/manual/en/scripting/life-cycle-callbacks.html\n\nconst { ccclass, property } = cc._decorator;\n\nexport interface CSVRecord {\n  [key: string]: string;\n}\n\nexport class CSVLoader {\n  /**\n   * Parse raw CSV string thành mảng object.\n   */\n  static parse(csvText: string): CSVRecord[] {\n    const lines = csvText.trim().split(\"\\n\");\n    const headers = lines[0].split(\",\");\n\n    const records: CSVRecord[] = [];\n\n    for (let i = 1; i < lines.length; i++) {\n      const line = lines[i].split(\",\");\n      const record: CSVRecord = {};\n\n      headers.forEach((header, idx) => {\n        record[header.trim()] = line[idx].trim();\n      });\n\n      records.push(record);\n    }\n\n    return records;\n  }\n\n  /**\n   * Tải CSV từ folder resources/configs/\n   */\n  static async load(filename: string): Promise<CSVRecord[]> {\n    return new Promise((resolve, reject) => {\n      cc.resources.load(\n        `configs/${filename}`,\n        (err: Error | null, asset: cc.TextAsset) => {\n          if (err) {\n            console.error(\"Load CSV failed:\", err);\n            reject(err);\n            return;\n          }\n          const data = this.parse(asset.text);\n          resolve(data);\n        }\n      );\n    });\n  }\n}\n"]}