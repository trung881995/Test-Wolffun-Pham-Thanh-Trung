{"version":3,"sources":["assets/scripts/data/GameConfig.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { PlantType } from \"../../enums/PlantType\";\nimport { CattleType } from \"../../enums/CattleType\";\nimport { YieldType } from \"../../enums/YieldType\";\nimport { LandType } from \"../../enums/LandType\";\nimport { WorkerType } from \"../../enums/WorkerType\";\nimport { MachineType } from \"../../enums/MachineType\";\nimport { Type } from \"../../enums/Type\";\nimport { CSVLoader } from \"../utils/CSVLoader\";\n\nexport interface FirstConfig {\n  name: string;\n  number: number;\n}\nexport interface YieldConfig {\n  name: string;\n  sellPrice: number;\n}\nexport interface CattleConfig {\n  name: string;\n  harvestInterval: number;\n  maxHarvest: number;\n  buyPrice: number;\n}\nexport interface PlantConfig {\n  name: string;\n  harvestInterval: number;\n  maxHarvest: number;\n  buyPrice: number;\n}\nexport interface LandConfig {\n  name: string;\n  missionNumber: number;\n  emptyInterval: number;\n  buyPrice: number;\n}\nexport interface WorkerConfig {\n  name: string;\n  workingInterval: number;\n  buyPrice: number;\n}\nexport interface MachineConfig {\n  name: string;\n  level: number;\n  support: number;\n  upgradePrice: number;\n}\nexport const PlantConfigs: Record<PlantType, PlantConfig> = {\n  [PlantType.Tomato]: {\n    name: \"\",\n    harvestInterval: 0,\n    maxHarvest: 0,\n    buyPrice: 0,\n  },\n  [PlantType.Blueberry]: {\n    name: \"\",\n    harvestInterval: 0,\n    maxHarvest: 0,\n    buyPrice: 0,\n  },\n  [PlantType.Strawberry]: {\n    name: \"\",\n    harvestInterval: 0,\n    maxHarvest: 0,\n    buyPrice: 0,\n  },\n};\nexport const CattleConfigs: Record<CattleType, CattleConfig> = {\n  [CattleType.Milkcow]: {\n    name: \"\",\n    harvestInterval: 0,\n    maxHarvest: 0,\n    buyPrice: 0,\n  },\n  [CattleType.Cow]: {\n    name: \"\",\n    harvestInterval: 0,\n    maxHarvest: 0,\n    buyPrice: 0,\n  },\n};\nexport const YieldConfigs: Record<YieldType, YieldConfig> = {\n  [YieldType.Tomato]: {\n    name: \"\",\n    sellPrice: 0,\n  },\n  [YieldType.Blueberry]: {\n    name: \"\",\n    sellPrice: 0,\n  },\n  [YieldType.Milk]: {\n    name: \"\",\n    sellPrice: 0,\n  },\n  [YieldType.Beef]: {\n    name: \"\",\n    sellPrice: 0,\n  },\n};\nexport const LandConfigs: Record<LandType, LandConfig> = {\n  [LandType.Red]: {\n    name: \"\",\n    missionNumber: 0,\n    emptyInterval: 0,\n    buyPrice: 0,\n  },\n  [LandType.Green]: {\n    name: \"\",\n    missionNumber: 0,\n    emptyInterval: 0,\n    buyPrice: 0,\n  },\n  [LandType.Brown]: {\n    name: \"\",\n    missionNumber: 0,\n    emptyInterval: 0,\n    buyPrice: 0,\n  },\n};\n\nexport const WorkerConfigs: Record<WorkerType, WorkerConfig> = {\n  [WorkerType.Fresher]: {\n    name: \"\",\n    workingInterval: 0,\n    buyPrice: 0,\n  },\n  [WorkerType.Junior]: {\n    name: \"\",\n    workingInterval: 0,\n    buyPrice: 0,\n  },\n  [WorkerType.Middle]: {\n    name: \"\",\n    workingInterval: 0,\n    buyPrice: 0,\n  },\n  [WorkerType.Senior]: {\n    name: \"\",\n    workingInterval: 0,\n    buyPrice: 0,\n  },\n};\nexport const MachineConfigs: Record<MachineType, MachineConfig> = {\n  [MachineType.China]: {\n    name: \"\",\n    level: 0,\n    support: 0,\n    upgradePrice: 0,\n  },\n  [MachineType.Japan]: {\n    name: \"\",\n    level: 0,\n    support: 0,\n    upgradePrice: 0,\n  },\n  [MachineType.America]: {\n    name: \"\",\n    level: 0,\n    support: 0,\n    upgradePrice: 0,\n  },\n  [MachineType.Vietnam]: {\n    name: \"\",\n    level: 0,\n    support: 0,\n    upgradePrice: 0,\n  },\n};\nexport const FirstConfigs: Record<Type, FirstConfig> = {\n  [Type.Land]: {\n    name: \"\",\n    number: 0,\n  },\n  [Type.Tomatoseed]: {\n    name: \"\",\n    number: 0,\n  },\n  [Type.Blueberryseed]: {\n    name: \"\",\n    number: 0,\n  },\n  [Type.Milkcow]: {\n    name: \"\",\n    number: 0,\n  },\n  [Type.Worker]: {\n    name: \"\",\n    number: 0,\n  },\n  [Type.Machine]: {\n    name: \"\",\n    number: 0,\n  },\n};\nexport async function loadFirstConfigFromCSV(): Promise<void> {\n  const records = await CSVLoader.load(\"first\");\n\n  records.forEach((row) => {\n    const type = row.name.toLowerCase() as Type;\n\n    if (FirstConfigs[type]) {\n      FirstConfigs[type] = {\n        name: row.name,\n        number: parseInt(row.number),\n      };\n    }\n  });\n\n  console.log(\"[CSV] FirstConfigs loaded:\", FirstConfigs);\n}\n\nexport async function loadPlantConfigFromCSV(): Promise<void> {\n  const records = await CSVLoader.load(\"plants.csv\");\n\n  records.forEach((row) => {\n    const type = row.name.toLowerCase() as PlantType;\n\n    if (PlantConfigs[type]) {\n      PlantConfigs[type] = {\n        name: row.name,\n        harvestInterval: parseFloat(row.harvestInterval),\n        maxHarvest: parseInt(row.maxHarvest),\n        buyPrice: parseInt(row.buyPrice),\n      };\n    }\n  });\n\n  console.log(\"[CSV] PlantConfigs loaded:\", PlantConfigs);\n}\n\nexport async function loadCattleConfigFromCSV(): Promise<void> {\n  const records = await CSVLoader.load(\"cattles.csv\");\n\n  records.forEach((row) => {\n    const type = row.name.toLowerCase() as CattleType;\n\n    if (CattleConfigs[type]) {\n      CattleConfigs[type] = {\n        name: row.name,\n        harvestInterval: parseFloat(row.harvestInterval),\n        maxHarvest: parseInt(row.maxHarvest),\n        buyPrice: parseInt(row.sellPrice),\n      };\n    }\n  });\n\n  console.log(\"[CSV] CattleConfigs loaded:\", CattleConfigs);\n}\n\nexport async function loadYieldConfigFromCSV(): Promise<void> {\n  const records = await CSVLoader.load(\"Yields.csv\");\n\n  records.forEach((row) => {\n    const type = row.name.toLowerCase() as YieldType;\n\n    if (YieldConfigs[type]) {\n      YieldConfigs[type] = {\n        name: row.name,\n        sellPrice: parseInt(row.sellPrice),\n      };\n    }\n  });\n\n  console.log(\"[CSV] YieldConfigs loaded:\", YieldConfigs);\n}\nexport async function loadWorkerConfigFromCSV(): Promise<void> {\n  const records = await CSVLoader.load(\"Workers.csv\");\n\n  records.forEach((row) => {\n    const type = row.name.toLowerCase() as WorkerType;\n\n    if (WorkerConfigs[type]) {\n      WorkerConfigs[type] = {\n        name: row.name,\n        workingInterval: parseFloat(row.workingInterval),\n        buyPrice: parseInt(row.buyPrice),\n      };\n    }\n  });\n\n  console.log(\"[CSV] WorkerConfigs loaded:\", WorkerConfigs);\n}\n\nexport async function loadMachineConfigFromCSV(): Promise<void> {\n  const records = await CSVLoader.load(\"Machines.csv\");\n\n  records.forEach((row) => {\n    const type = row.name.toLowerCase() as MachineType;\n\n    if (MachineConfigs[type]) {\n      MachineConfigs[type] = {\n        name: row.name,\n        level: parseInt(row.level),\n        support: parseFloat(row.support),\n        upgradePrice: parseInt(row.upgradePrice),\n      };\n    }\n  });\n\n  console.log(\"[CSV] MachineConfigs loaded:\", MachineConfigs);\n}\nexport async function loadLandConfigFromCSV(): Promise<void> {\n  const records = await CSVLoader.load(\"Lands.csv\");\n\n  records.forEach((row) => {\n    const type = row.name.toLowerCase() as LandType;\n\n    if (LandConfigs[type]) {\n      LandConfigs[type] = {\n        name: row.name,\n        missionNumber: parseInt(row.missionNumber),\n        emptyInterval: parseFloat(row.emptyInterval),\n        buyPrice: parseInt(row.buyPrice),\n      };\n    }\n  });\n\n  console.log(\"[CSV] LandConfigs loaded:\", LandConfigs);\n}\n"]}